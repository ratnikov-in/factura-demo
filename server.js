const express = require('express');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const app = express();
const PORT = process.env.PORT || 3000;

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-here';

app.use(express.json());
app.use(cors());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ AbsClientID
function generateSixDigitCode(clientId) {
    if (!clientId) return '000000';
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    const cleanId = clientId.toString().replace(/[-\s]/g, '');
    
    // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
    let hash = 0;
    for (let i = 0; i < cleanId.length; i++) {
        const char = cleanId.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash;
    }

    // –ë–µ—Ä–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
    return Math.abs(hash % 1000000).toString().padStart(6, '0');
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

    if (!token) {
        return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (error) {
        console.error('JWT –æ—à–∏–±–∫–∞:', error.message);
        return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>JWT Decoder App</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }
                
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                    padding: 20px;
                }
                
                .container {
                    max-width: 800px;
                    margin: 0 auto;
                    background: white;
                    border-radius: 15px;
                    box-shadow: 0 15px 35px rgba(0,0,0,0.1);
                    overflow: hidden;
                }
                
                .header {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 2rem;
                    text-align: center;
                }
                
                .header h1 {
                    font-size: 2.5rem;
                    margin-bottom: 0.5rem;
                }
                
                .header p {
                    opacity: 0.9;
                    font-size: 1.1rem;
                }
                
                .content {
                    padding: 2rem;
                }
                
                .form-group {
                    margin-bottom: 1.5rem;
                }
                
                label {
                    display: block;
                    margin-bottom: 0.5rem;
                    font-weight: 600;
                    color: #555;
                }
                
                textarea {
                    width: 100%;
                    height: 120px;
                    padding: 12px;
                    border: 2px solid #e1e5e9;
                    border-radius: 8px;
                    font-family: 'Courier New', monospace;
                    font-size: 14px;
                    resize: vertical;
                    transition: border-color 0.3s;
                }
                
                textarea:focus {
                    outline: none;
                    border-color: #667eea;
                }
                
                .btn {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    padding: 12px 30px;
                    border-radius: 8px;
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: transform 0.2s, box-shadow 0.2s;
                    display: inline-block;
                }
                
                .btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
                }
                
                .btn:active {
                    transform: translateY(0);
                }
                
                .result {
                    margin-top: 2rem;
                    padding: 1.5rem;
                    background: #f8f9fa;
                    border-radius: 8px;
                    border-left: 4px solid #667eea;
                    display: none;
                }
                
                .code-display {
                    text-align: center;
                    margin: 1.5rem 0;
                }
                
                .code {
                    font-size: 3rem;
                    font-weight: bold;
                    color: #28a745;
                    letter-spacing: 0.8rem;
                    text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
                    margin: 1rem 0;
                    padding: 1rem;
                    background: white;
                    border-radius: 10px;
                    border: 2px dashed #28a745;
                }
                
                .info-box {
                    background: #e7f3ff;
                    border-left: 4px solid #2196F3;
                    padding: 1rem;
                    margin: 1rem 0;
                    border-radius: 4px;
                }
                
                .error {
                    background: #ffe7e7;
                    border-left: 4px solid #f44336;
                    padding: 1rem;
                    margin: 1rem 0;
                    border-radius: 4px;
                    display: none;
                }
                
                pre {
                    background: #2d2d2d;
                    color: #f8f8f2;
                    padding: 1rem;
                    border-radius: 8px;
                    overflow-x: auto;
                    margin: 1rem 0;
                }
                
                .instructions {
                    background: #fff3cd;
                    border-left: 4px solid #ffc107;
                    padding: 1rem;
                    margin: 1.5rem 0;
                    border-radius: 4px;
                }
                
                @media (max-width: 768px) {
                    .header h1 {
                        font-size: 2rem;
                    }
                    
                    .code {
                        font-size: 2rem;
                        letter-spacing: 0.5rem;
                    }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üîê JWT Decoder</h1>
                    <p>–î–µ–∫–æ–¥–∏—Ä—É–π—Ç–µ JWT —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥</p>
                </div>
                
                <div class="content">
                    <div class="instructions">
                        <h3>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</h3>
                        <p>1. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à JWT —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ –Ω–∏–∂–µ</p>
                        <p>2. –ù–∞–∂–º–∏—Ç–µ "–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"</p>
                        <p>3. –ü–æ–ª—É—á–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ AbsClientID</p>
                    </div>
                    
                    <div class="form-group">
                        <label for="jwtToken">JWT –¢–æ–∫–µ–Ω:</label>
                        <textarea 
                            id="jwtToken" 
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à JWT —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å..."
                        ></textarea>
                    </div>
                    
                    <button class="btn" onclick="decodeToken()">
                        üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
                    </button>
                    
                    <div id="error" class="error"></div>
                    
                    <div id="result" class="result">
                        <h3>‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
                        <div class="code-display">
                            <p>–í–∞—à 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:</p>
                            <div id="code" class="code"></div>
                            <p><small>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç</small></p>
                        </div>
                        
                        <div class="info-box">
                            <h4>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–æ–∫–µ–Ω–∞:</h4>
                            <div id="tokenInfo"></div>
                        </div>
                    </div>
                    
                    <div class="info-box">
                        <h4>üîß API Endpoint:</h4>
                        <p><strong>POST /api/verify</strong></p>
                        <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization:</p>
                        <pre>Authorization: Bearer YOUR_JWT_TOKEN_HERE</pre>
                    </div>
                </div>
            </div>

            <script>
                function decodeToken() {
                    const tokenInput = document.getElementById('jwtToken').value.trim();
                    const resultDiv = document.getElementById('result');
                    const errorDiv = document.getElementById('error');
                    const codeDiv = document.getElementById('code');
                    const tokenInfoDiv = document.getElementById('tokenInfo');
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    resultDiv.style.display = 'none';
                    errorDiv.style.display = 'none';
                    
                    if (!tokenInput) {
                        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω');
                        return;
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                    codeDiv.textContent = '...';
                    resultDiv.style.display = 'block';
                    
                    fetch('/api/verify', {
                        method: 'POST',
                        headers: {
                            'Authorization': 'Bearer ' + tokenInput,
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => {
                                throw new Error(err.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                            });
                        }
                        return response.json();
                    })
                }
                
                function showError(message) {
                    const errorDiv = document.getElementById('error');
                    errorDiv.textContent = message;
                    errorDiv.style.display = 'block';
                }
                
                // –ü—Ä–∏–º–µ—Ä JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                document.getElementById('jwtToken').value = 
                    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.' +
                    'eyJwYXlsb2FkIjp7IkFic0NsaWVudElEIjoiYjY5NmIyNjAtMDNlYy00NmI3LTg1NWEtYmIyYWIzZGExOTc2IiwiY2FsbFBvaW50VHlwZSI6Ilx1MDQxZlx1MDQzMFx1MDQzNlx1MDQzOFx1MDQzYlx1MDQzOCIsInByb2R1Y3RJRCI6IkFDX2FjY291bnQiLCJzdWIiOiJzdHJpbmciLCJmcmFtZUNhbGxQb2ludE5hbWUiOiJzdHJpbmcifSwiaGVhZGVyIjp7ImFsZyI6IkhTMjU2IiwidHlwIjoiSldUIn0sInNpZ25hdHVyZSI6eyJzdWIiOiJzdHJpbmcifX0.' +
                    'fake_signature_for_demonstration_only';
            </script>
        </body>
        </html>
    `);
});

// API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
app.post('/api/verify', authenticateToken, (req, res) => {
    try {
        const decodedToken = req.user;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–∫–µ–Ω–∞
        if (!decodedToken.payload || !decodedToken.payload.AbsClientID) {
            return res.status(400).json({ 
                error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–∫–µ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç payload.AbsClientID' 
            });
        }

        const absClientID = decodedToken.payload.AbsClientID;
        const sixDigitCode = generateSixDigitCode(absClientID);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –∫–æ–¥–æ–º –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        res.json({
            success: true,
            code: sixDigitCode,
            decoded: decodedToken,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞' 
        });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JWT (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
app.get('/api/test-token', (req, res) => {
    const testPayload = {
        header: {
            alg: "HS256",
            typ: "JWT"
        },
        payload: {
            AbsClientID: "b696b260-03ec-46b7-855a-bb2ab3da1976",
            callPointType: "–ü—Ä–æ—Ñ–∏–ª—å",
            productID: "AC_account",
            sub: "string",
            frameCallPointName: "string"
        },
        signature: {
            sub: "string"
        }
    };
    
    const testToken = jwt.sign(testPayload, JWT_SECRET, { expiresIn: '1h' });
    
    res.json({
        token: testToken,
        payload: testPayload
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res) => {
    res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìß API Endpoint: http://localhost:${PORT}/api/verify`);
    console.log(`üîó –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω: http://localhost:${PORT}/api/test-token`);
});